# Define pipeline stages
stages:
  - build
  - deploy

# Build job
build-backend:
  stage: build
  image: node:20
  script:
    - echo "Checking for Dockerfile..."
    - ls -la
    - echo "Installing backend dependencies..."
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 week
  only:
    - main
    - develop

# Setup SSH and dependencies job
setup-ssh:
  stage: deploy
  image: ubuntu:latest # Use Ubuntu for SSH setup
  script:
    - echo "Current Directory:$(pwd)"
    - echo "Current User:$(whoami)"
    - echo "Installing OpenSSH client..."
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p .ssh
    - echo "$SSH_PRIVATE_KEY" > .ssh/id_rsa
    - chmod 600 .ssh/id_rsa
    - ssh-keyscan -H ec2-44-203-85-14.compute-1.amazonaws.com > .ssh/known_hosts
    - cp .ssh/id_rsa id_rsa
    - cp .ssh/known_hosts known_hosts
  artifacts:
    paths:
      - id_rsa
      - known_hosts
    expire_in: 1 hour

# Deploy job
deploy-backend:
  stage: deploy
  image: docker:latest # Use Docker image for deployment
  services:
    - name: docker:dind
      command: ["--insecure-registry=git.clp.kr:5050"]
  dependencies:
    - setup-ssh # Ensure the SSH keys are available
  script:
    - echo "Current Directory:$(pwd)"
    - echo "Current User:$(whoami)"
    - echo "Listing files in the current directory:"
    - ls -la
    - echo "Restoring SSH keys..."
    - mkdir -p ~/.ssh
    - cp id_rsa ~/.ssh/id_rsa
    - cp known_hosts ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/id_rsa
    - echo "Login Docker user..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - echo "Registry Image:$CI_REGISTRY_IMAGE"
    - echo "Building Docker image..."
    - docker build -t "$CI_REGISTRY_IMAGE/backend:latest" -f ./DockerFile .
    - echo "Pushing Docker image to the registry..."
    - docker push "$CI_REGISTRY_IMAGE/backend:latest"
    - echo "Deploying backend to EC2..."
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@ec2-44-203-85-14.compute-1.amazonaws.com "
      sudo su -c 'cd /home/ubuntu/wavetrack-server &&
      git pull origin develop &&
      docker pull $CI_REGISTRY_IMAGE/backend:latest &&
      docker-compose -f /home/ubuntu/wavetrack-server/docker-compose.yml up -d --build'
      "
  environment:
    name: production
    url: https://web.vottamean.com/api/v1
  only:
    - main
    - develop
