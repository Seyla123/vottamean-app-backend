stages:
  - build
  - test
  - deploy

build_job:
  stage: build
  image: alpine:latest
  script:
    - echo "Building the project..."
    - apk update && apk add --no-cache git
    - git --version

test_job:
  stage: test
  image: alpine:latest
  script:
    - echo "Running tests..."
    - echo "Tests are successful!"

deploy_job:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying the project..."
    - echo "Deployment complete!"


# # Define pipeline stages
# stages:
#   - build
#   - test
#   - deploy

# # Cache node_modules to speed up subsequent builds
# cache:
#   paths:
#     - node_modules/

# # Build job
# build-job:
#   stage: build
#   image: node:16 # Use appropriate Node.js version
#    script:
#     - echo "Installing backend dependencies..."
#     - npm ci # or npm install 
#   artifacts:
#     paths:
#       - src/
#     expire_in: 1 week
#   only:
#     - main

# # Test job
# test-job:
#   stage: test
#   image: node:16
#   services:
#     - name: mysql:5.7 # Include MySQL service for backend testing
#       alias: db
#   script:
#     - echo "Running backend tests..."
#     - npm run test # Adjust based on your backend test setup
#   dependencies:
#     - build-job
#   artifacts:
#     when: always
#     paths:
#       - test-results/
#     expire_in: 1 week
#   only:
#     - merge_requests

# # Deploy job
# deploy-job:
#   stage: deploy
#   image: docker:latest
#   script:
#     - echo "Deploying backend..."
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - docker build -t $CI_REGISTRY_IMAGE/backend:latest .
#     - docker push $CI_REGISTRY_IMAGE/backend:latest
#   environment:
#     name: production
#     url: https://your-backend-production-url.com
#   only:
#     - main

