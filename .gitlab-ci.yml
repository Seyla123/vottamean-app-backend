# Define pipeline stages
stages:
  - build
  - deploy

# Build job
build-backend:
  stage: build
  image: node:20
  script:
    - echo "Checking for Dockerfile..."
    - ls -la
    - echo "Installing backend dependencies..."
    - npm install
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 week
  only:
    - main
    - develop

# Deploy job
deploy-backend:
  stage: deploy
  image: docker:latest # Use Docker image for deployment
  services:
    - name: docker:dind
      command: ["--insecure-registry=git.clp.kr:5050"]
  script:
    - echo "Current Directory:$(pwd)"
    - echo "Current User:$(whoami)"
    - echo "Listing files in the current directory:"
    - ls -la
    - echo "Logging in to Docker registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - echo "Registry Image:$CI_REGISTRY_IMAGE"
    - echo "Building Docker image..."
    - docker build -t "$CI_REGISTRY_IMAGE/backend:latest" -f ./DockerFile .
    - echo "Pushing Docker image to the registry..."
    - docker push "$CI_REGISTRY_IMAGE/backend:latest"
    - echo "Deploying backend using Docker..."
    # Here, you might run a curl command or interact with your deployment platform's API
    # if you're using ECS, EKS, or similar. This is placeholder logic:
    - echo "Triggering deployment on remote server or platform (replace with actual command)."
  environment:
    name: production
    url: https://web.vottamean.com/api/v1
  only:
    - main
    - develop
